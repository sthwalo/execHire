name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ secrets.TEST_DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
          POSTGRES_DB: execuhire_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Create env file
        run: |
          echo "DATABASE_URL=${{ secrets.TEST_DATABASE_URL }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}" >> .env

      - name: Run database migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}

      - name: Run ESLint
        run: npm run lint

      - name: Run tests
        run: npm test
        env:
          DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create env file
        run: |
          echo "DATABASE_URL=${{ secrets.PROD_DATABASE_URL }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "NEXT_PUBLIC_API_URL=${{ secrets.PROD_API_URL }}" >> .env

      - name: Build application
        run: npm run build
        env:
          DATABASE_URL: ${{ secrets.PROD_DATABASE_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          NEXT_PUBLIC_API_URL: ${{ secrets.PROD_API_URL }}

      - name: Deploy to Vercel
        run: |
          npm install --global vercel
          vercel --token ${{ secrets.VERCEL_TOKEN }} --prod// scripts/check-env.js
          const requiredEnvVars = [
            'DATABASE_URL',
            'NEXTAUTH_SECRET',
            'NEXTAUTH_URL',
            'STRIPE_SECRET_KEY',
            'STRIPE_WEBHOOK_SECRET',
            'NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY'
          ];
          
          function checkEnvVariables() {
            const missingVars = requiredEnvVars.filter(envVar => !process.env[envVar]);
            
            if (missingVars.length > 0) {
              console.error('\x1b[31mError: Missing required environment variables:\x1b[0m');
              missingVars.forEach(envVar => {
                console.error(`- ${envVar}`);
              });
              console.error('\n\x1b[33mPlease check your .env file and make sure all required variables are set.\x1b[0m');
              process.exit(1);
            } else {
              console.log('\x1b[32mâœ“ All required environment variables are set\x1b[0m');
            }
          }
          
          checkEnvVariables();