// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String?
  password      String
  role          Role          @default(USER)
  bookings      Booking[]
  notifications Notification[]
  payments      Payment[]
  reviews       Review[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Vehicle {
  id           String    @id @default(cuid())
  name         String    @unique
  image        String
  images       String[]  @default([])
  price        String
  pricePerDay  Decimal   @default(0)
  pricePerHour Decimal   @default(0)
  specs        String[]
  description  String?   @default("")
  category     Category  @default(STANDARD)
  available    Boolean   @default(true)
  featured     Boolean   @default(false)
  bookings     Booking[]
  reviews      Review[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Booking {
  id          String        @id @default(cuid())
  userId      String
  vehicleId   String
  startDate   DateTime
  endDate     DateTime
  status      BookingStatus @default(PENDING)
  totalAmount Decimal
  payment     Payment?
  user        User         @relation(fields: [userId], references: [id])
  vehicle     Vehicle      @relation(fields: [vehicleId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Payment {
  id          String        @id @default(cuid())
  bookingId   String       @unique
  userId      String
  amount      Decimal
  status      PaymentStatus @default(PENDING)
  stripeId    String?      
  booking     Booking      @relation(fields: [bookingId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Review {
  id        String   @id @default(cuid())
  vehicleId String
  userId    String
  rating    Int
  comment   String
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  read      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum Category {
  STANDARD
  LUXURY
  SPORT
  VINTAGE
  VAN
  SUV
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
